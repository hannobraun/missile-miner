Skeleton improvements:

- Don't add the canvas to the HTML. Just add a div and create the canvas in
  code. This has two advantages:
  * Currently, with the black background, the fallback text is not correctly
    displayed. If the canvas (and its style information) were generated at
    runtime, this wouldn't be a problem.
  * Using a div would allow for choosing alternative rendering methods at
    runtime.
- Add CLI tool that can:
  * Create a new component from a template (./create component Body [Bodies]).
  * Create a new entity from a template (./create entity Miner [Miners]).
- Collect some performance metrics:
  * Time it takes to finish a frame (average and standard deviation).
  * Time it takes to finish parts of a frame (average and standard deviation).
- Don't generate any garbage in Graphics and check if that makes any difference
  for performance (especially standard deviation).
- Auto-generate a module each that depends on all entities/components and
  provides access to them in a useful manner. Provide functions that allow easy
  access to the data in these modules via some kind of DSL.
  Examples of use cases that need some kind of DSL written for them:
  * Creating entities. Currently a data structure is built by hand.
  * updateGameState: If component modules would need to be accessed via a data
    structure provided by some intermediate module, the code would get unwieldy
    pretty fast.
